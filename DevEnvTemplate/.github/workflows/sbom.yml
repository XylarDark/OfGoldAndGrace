name: Generate SBOM

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    # Weekly SBOM generation
    - cron: '0 3 * * 1'

permissions:
  contents: read
  id-token: write

jobs:
  sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Set up Node.js (if applicable)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (if applicable)
        run: |
          if [ -f package.json ]; then
            npm ci --only=production
          elif [ -f yarn.lock ]; then
            yarn install --production --frozen-lockfile
          fi
        continue-on-error: true

      - name: Generate SBOM
        run: |
          # Generate SBOM in SPDX format
          syft packages . \
            --output spdx-json=sbom.spdx.json \
            --output cyclonedx-json=sbom.cyclonedx.json \
            --output syft-json=sbom.syft.json

          # Display summary
          echo "## SBOM Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ“„ **SPDX JSON**: \`sbom.spdx.json\` (Industry standard format)" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ“„ **CycloneDX JSON**: \`sbom.cyclonedx.json\` (Alternative standard)" >> $GITHUB_STEP_SUMMARY
          echo "- ðŸ“„ **Syft JSON**: \`sbom.syft.json\` (Detailed analysis)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: Identify vulnerable dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- **Compliance**: Track license and component usage" >> $GITHUB_STEP_SUMMARY
          echo "- **Supply Chain**: Understand dependency relationships" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tools" >> $GITHUB_STEP_SUMMARY
          echo "- View with [DependencyTrack](https://dependencytrack.org/)" >> $GITHUB_STEP_SUMMARY
          echo "- Analyze with [SBOM utilities](https://github.com/CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "- Generate reports with [Syft](https://github.com/anchore/syft)" >> $GITHUB_STEP_SUMMARY

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.event.repository.name }}-${{ github.sha }}
          path: |
            sbom.spdx.json
            sbom.cyclonedx.json
            sbom.syft.json
          retention-days: 90

      - name: Display SBOM preview
        run: |
          echo "## SBOM Preview (Top 10 Components)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          jq '.packages[:10][] | {name: .name, version: .versionInfo, supplier: .supplier}' sbom.spdx.json 2>/dev/null || echo "Preview not available" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

  attest:
    name: Attest Build Provenance
    runs-on: ubuntu-latest
    needs: sbom

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'sbom.spdx.json'

      - name: Summary
        run: |
          echo "## Build Attestation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What is Build Attestation?" >> $GITHUB_STEP_SUMMARY
          echo "Build attestation cryptographically proves that artifacts were built by this workflow." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- **Supply Chain Security**: Verify artifact integrity" >> $GITHUB_STEP_SUMMARY
          echo "- **Compliance**: Meet software supply chain requirements" >> $GITHUB_STEP_SUMMARY
          echo "- **Trust**: Prove artifacts haven't been tampered with" >> $GITHUB_STEP_SUMMARY
        continue-on-error: true
